// +build generate

package main

/*
#cgo LDFLAGS: -lxed
#include <xed/xed-interface.h>
*/
import "C"

import (
	"bytes"
	"fmt"
	"go/format"
)

func main() {
	var buf bytes.Buffer
	writePackageHeader(&buf)
	writeRegistersMap(&buf)

	code, err := format.Source(buf.Bytes())
	if err != nil {
		panic(err)
	}
	fmt.Print(string(code))
}

func writeLines(buf *bytes.Buffer, lines []string) {
	for _, line := range lines {
		buf.WriteString(line)
		buf.WriteByte('\n')
	}
}

func writePackageHeader(buf *bytes.Buffer) {
	writeLines(buf, []string{
		"// Code generated by xed_tables.go. DO NOT EDIT.",
		"",
		"package xedq",
	})
}

func writeRegistersMap(buf *bytes.Buffer) {
	var lines []string
	regLast := int(C.XED_REG_LAST)
	regFirst := int(C.XED_REG_INVALID)
	for i := regFirst; i < regLast; i++ {
		regID := C.xed_reg_enum_t(i)
		regName := C.GoString(C.xed_reg_enum_t2str(regID))
		line := fmt.Sprintf("\t%q: %d,", regName, i)
		lines = append(lines, line)
	}

	buf.WriteString("var registerByName = map[string]xedRegister{\n")
	writeLines(buf, lines)
	buf.WriteString("}\n")
}
